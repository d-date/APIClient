//
// StoreAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct StoreAPI {
    /**
     Delete purchase order by ID
     - DELETE /store/order/{orderId}
     - For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     - parameter orderId: (path) ID of the order that needs to be deleted 
     - returns: PostRequestBuilder 
     */
    public static func deleteOrder(orderId: Int64) -> PostRequestBuilder {
        var path = "/store/order/{orderId}"
        let orderIdEscaped = "\(orderId)".addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orderId}", with: orderIdEscaped, options: .literal, range: nil)
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: nil)
        return PostRequestBuilder(endpoint: path, method: "DELETE", parameters: parameters)
    }

    /**
     Returns pet inventories by status
     - GET /store/inventory
     - Returns a map of status codes to quantities
     - API Key:
       - type: apiKey api_key 
       - name: api_key
     - returns: RequestBuilder<[String:Int]> 
     */
    public static func getInventory() -> RequestBuilder<[String: Int]> {
        let path = "/store/inventory"
        return RequestBuilder<[String: Int]>(endpoint: path, method: "GET")
    }

    /**
     Find purchase order by ID
     - GET /store/order/{orderId}
     - For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     - parameter orderId: (path) ID of pet that needs to be fetched 
     - returns: RequestBuilder<Order> 
     */
    public static func getOrderById(orderId: Int64) -> RequestBuilder<Order> {
        var path = "/store/order/{orderId}"
        let orderIdEscaped = "\(orderId)".addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orderId}", with: orderIdEscaped, options: .literal, range: nil)
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: nil)
        return RequestBuilder<Order>(endpoint: path, method: "GET", parameters: parameters)
    }

    /**
     Place an order for a pet
     - POST /store/order
     - parameter body: (body) order placed for purchasing the pet 
     - returns: RequestBuilder<Order> 
     */
    public static func placeOrder(body: Order) -> RequestBuilder<Order> {
        let path = "/store/order"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Order>(endpoint: path, method: "POST", parameters: parameters)
    }

}
