//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UserAPI {
    /**
     Create user
     - POST /user
     - This can only be done by the logged in user.
     - parameter body: (body) Created user object 
     - returns: RequestBuilder<Void>
     */
    public static func createUser(body: User) -> RequestBuilder<Void> {
        let path = "/user"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Void>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     Creates list of users with given input array
     - POST /user/createWithArray
     - parameter body: (body) List of user object 
     - returns: RequestBuilder<Void>
     */
    public static func createUsersWithArrayInput(body: [User]) -> RequestBuilder<Void> {
        let path = "/user/createWithArray"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Void>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     Creates list of users with given input array
     - POST /user/createWithList
     - parameter body: (body) List of user object 
     - returns: RequestBuilder<Void>
     */
    public static func createUsersWithListInput(body: [User]) -> RequestBuilder<Void> {
        let path = "/user/createWithList"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Void>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     Delete user
     - DELETE /user/{username}
     - This can only be done by the logged in user.
     - parameter username: (path) The name that needs to be deleted 
     - returns: RequestBuilder<Void>
     */
    public static func deleteUser(username: String) -> RequestBuilder<Void> {
        var path = "/user/{username}"
        let usernameEscaped = "\(username)".addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernameEscaped, options: .literal, range: nil)
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: nil)
        return RequestBuilder<Void>(endpoint: path, method: "DELETE", parameters: parameters)
    }

    /**
     Get user by user name
     - GET /user/{username}
     - parameter username: (path) The name that needs to be fetched. Use user1 for testing.  
     - returns: RequestBuilder<User> 
     */
    public static func getUserByName(username: String) -> RequestBuilder<User> {
        var path = "/user/{username}"
        let usernameEscaped = "\(username)".addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernameEscaped, options: .literal, range: nil)
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: nil)
        return RequestBuilder<User>(endpoint: path, method: "GET", parameters: parameters)
    }

    /**
     Logs user into the system
     - GET /user/login
     - responseHeaders: [X-Rate-Limit(Int), X-Expires-After(Date)]
     - parameter username: (query) The user name for login 
     - parameter password: (query) The password for login in clear text 
     - returns: RequestBuilder<String> 
     */
    public static func loginUser(username: String, password: String) -> RequestBuilder<String> {
        let path = "/user/login"
        let parameters = Parameters(
            query: ["username": username, "password": password],
            form: nil,
            body: nil)
        return RequestBuilder<String>(endpoint: path, method: "GET", parameters: parameters)
    }

    /**
     Logs out current logged in user session
     - GET /user/logout
     - returns: RequestBuilder<Void>
     */
    public static func logoutUser() -> RequestBuilder<Void> {
        let path = "/user/logout"
        return RequestBuilder<Void>(endpoint: path, method: "GET")
    }

    /**
     Updated user
     - PUT /user/{username}
     - This can only be done by the logged in user.
     - parameter username: (path) name that need to be updated 
     - parameter body: (body) Updated user object 
     - returns: RequestBuilder<Void>
     */
    public static func updateUser(username: String, body: User) -> RequestBuilder<Void> {
        var path = "/user/{username}"
        let usernameEscaped = "\(username)".addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernameEscaped, options: .literal, range: nil)
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Void>(endpoint: path, method: "PUT", parameters: parameters)
    }

}
